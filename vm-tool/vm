#!/bin/bash

# Bash Colors
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
MAGENTA='\033[1;35m'
CYAN='\033[1;36m'
NC='\033[0m'

function choose() { echo ${1:RANDOM%${#1}:1}; }

function genPass() {
  pass=`{
    choose 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    choose '!@#$%^?&'
    choose '0123456789'
    choose 'abcdefghijklmnopqrstuvwxyz'
    for i in $( seq 1 12 )
    do
      choose '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^?&'
    done
  } | tr -d '\n'`
  echo $pass
}

function createVm() { 
  if [ -z "$1" ]; then
    imageName="ubuntu-14.04-cloudinit.qcow2"
  else
    IFS='=' read -r -a prop <<< "$1"
    if [ -z "${prop[0]}" || -z "${prop[1]}" || "${prop[0]}" != "--image" || ]; then
      printf "${RED}Invalid parameter!${NC}\n" >&2
      usage
      exit 1
    else
      imageName="${prop[1]}"
    fi
  fi

  echo "Generating server parameters..."
  username="ubuntu"
  flavorName="md.standard"
  networkName="185.80.180.0/23"
  secGroupName="Allow-All-Traffic"
  volSize=150
  decName=`date +%s$RANDOM`
  hexName=`printf '%x' $decName`
  volName="vol-$hexName"
  srvName="srv-$hexName"
  password=$(genPass)
  
  echo "Setting Login Credentials..."
  if [ ! -f ~/.openstack/admin.rc ]; then
    printf "${RED}OpenStack RC couldn't be found.${NC}\n" >&2
    printf "${YELLOW}Please move your OpenStack RC to $HOME/.openstack/admin.rc, or use the vm config option.${NC}\n" >&2
    usage
    exit 1
  fi

  source ~/.openstack/admin.rc
  
  if [ -z "$OS_USERNAME" ] || [ -z "$OS_TENANT_NAME" ] || \
     [ -z "$OS_PASSWORD" ] || [ -z "$OS_REGION_NAME" ] || \
     [ -z "$OS_AUTH_URL" ]; then
    printf "${RED}Some parameters are missing in your $HOME/.openstack/admin.rc${NC}\n" >&2
    exit 1
  fi

  echo "Gathering Information..."
  
  netId=`neutron net-show $networkName | grep ' id ' | \
    awk -F' ' '{print $4}'`
  if [ -z "$netId" ]; then
    printf "${RED}Network '$networkName' doesn't exists!${NC}\n" >&2
    printf "${YELLOW}Please try again with a differnet network name.${NC}\n" >&2
    exit 1
  fi

  echo "Creating Boot Volume..."
  createVol=`openstack volume create --image $imageName --size $volSize \
    $volName | grep ' id ' | awk -F' ' '{print $4}'`
  
  volCreated="false"
  for i in $( seq 1 60 ); do
    echo "Check #$i - is volume ready?"
    volStatus=`openstack volume show $createVol | grep ' status ' \
      | awk -F' ' '{print $4}'`
    if [ $volStatus == "available" ]; then
      printf "${GREEN}Volume created successfully!${NC}\n" >&2
      volCreated="true"
      break
    elif [ $volStatus == "error" ]; then
      printf "${RED}Could not create volume!${NC}\n" >&2
      exit 1
    else
      printf "${YELLOW}The volume has a status of '$volStatus.' Waiting 5 seconds${NC}\n" >&2
      sleep 5
    fi
  done

  if [ $volCreated == "false" ]; then
    printf "${RED}Could not create volume within 5 Minutes!${NC}\n" >&2
    printf "${YELLOW}This is unusual behavior.${NC}\n" >&2
    exit 1
  fi

  echo "Creating user data script..."
  
  echo "#cloud-config" > /tmp/user-data.yaml
  echo "password: $password" >> /tmp/user-data.yaml
  echo "chpasswd: { expire: False }" >> /tmp/user-data.yaml
  echo "ssh_pwauth: True" >> /tmp/user-data.yaml

  echo "Building server..."
  createSrv=`nova boot --config-drive true \
    --boot-volume $createVol --flavor $flavorName \
    --security-group $secGroupName --nic net-id=$netId \
    --user-data /tmp/user-data.yaml $srvName` 

  srvCreated="false"
  for i in $( seq 1 60 ); do
    printf "Check #$i - is server ready?\n"
    srvStatus=`openstack server show $srvName | grep ' status ' \
      | awk -F' ' '{print $4}'`
    if [ $srvStatus == "ACTIVE" ]; then
      printf "${GREEN}Server created successfully!${NC}\n" >&2
      srvCreated="true"
      break
    elif [ $srvStatus == "error" ]; then
      printf "${RED}Could not create server!${NC}\n" >&2
      exit 1
    else
      printf "${YELLOW}The server has a status of '$srvStatus.' Waiting 5 seconds${NC}\n" >&2
      sleep 5
    fi
  done

  if [ $srvCreated == "false" ]; then
    printf "${RED}Could not create server within 5 Minutes!${NC}\n" >&2
    printf "${YELLOW}This is unusual behavior.${NC}\n" >&2
    exit 1
  fi
  ipAddr=`openstack server show $srvName | grep ' addresses ' \
    | awk -F'=' '{print $2}'`
  echo "Done!"
  
  echo "Server Info:"
  echo "         Name:  $srvName"
  echo "           IP:  $ipAddr"
  echo "     Username:  $username"
  echo "     Password:  $password"
}

function delVm () {
  if [ -z "$1" ]; then
    printf "${RED}Too few arguments${NC}\n" >&2
    usage
    exit 1
  fi
  srvName=$1
  IFS='-' read -r -a prop <<< "$1"
  volName="vol-${prop[1]}"
  echo "Setting Login Credentials..."
  if [ ! -f ~/.openstack/admin.rc ]; then
    printf "${RED}OpenStack RC couldn't be found.${NC}\n" >&2
    printf "${YELLOW}Please move your OpenStack RC to $HOME/.openstack/admin.rc, or use the vm config option.${NC}\n" >&2
    usage
    exit 1
  fi

  source ~/.openstack/admin.rc
  
  if [ -z "$OS_USERNAME" ] || [ -z "$OS_TENANT_NAME" ] || \
     [ -z "$OS_PASSWORD" ] || [ -z "$OS_REGION_NAME" ] || \
     [ -z "$OS_AUTH_URL" ]; then
    printf "${RED}Some parameters are missing in your " \
      "$HOME/.openstack/admin.rc${NC}\n" >&2
    exit 1
  fi
  
  echo "Gathering Information..."
  
  srvId=`openstack server show $srvName | grep " id "| \
    awk -F' ' '{print $4}'`
  
  if [ -z "$srvId" ]; then
      printf "${RED}VM '$srvName' doesn't exists!${NC}\n" >&2
      printf "${YELLOW}Please try again with a differnet VM name.${NC}\n" >&2
      exit 1
  fi
  
  echo "Deleting server..."
  deleteServer=`openstack server delete $srvId | grep " id "| \
    awk -F' ' '{print $4}'`
  
  
  srvDeleted="false"
  for i in $( seq 1 60 ); do
    printf "Check #$i - has server been deleted?\n"
    srvStatus=''
    srvStatus=`openstack server show $srvName | grep ' status ' \
      | awk -F' ' '{print $4}'`
    if [ -z "$srvStatus" ]; then
        printf "${GREEN}The server has successfully been deleted!${NC}\n" >&2
        srvDeleted="true"
        break
    else
      printf "${YELLOW}The server has a status of '$srvStatus.' Waiting 5 seconds${NC}\n" >&2
      sleep 5
    fi
  done
  
  if [ $srvDeleted == "false" ]; then
    printf "${RED}Could not delete server within 5 Minutes!${NC}\n" >&2
    printf "${YELLOW}This is unusual behavior.${NC}\n" >&2
    exit 1
  fi
  echo "Deleting volume..."
  deleteVol=`openstack volume delete $volName | grep " id "| \
    awk -F' ' '{print $4}'`
  echo "Done!"
}

function config() {
  if [ -z "$1" ]; then
    printf "${RED}Too few arguments${NC}\n" >&2
    usage
    exit 1
  fi
  configFile=$1
  echo "Reading Config File..."
  if [ ! -f $configFile ]; then
    printf "${RED}The file specifed does not exist${NC}\n" >&2
    usage
    exit 1
  fi

  echo "Checking Config Settings..."
  source $1
  
  if [ -z "$OS_USERNAME" ] || [ -z "$OS_TENANT_NAME" ] || \
     [ -z "$OS_PASSWORD" ] || [ -z "$OS_REGION_NAME" ] || \
     [ -z "$OS_AUTH_URL" ]; then
    printf "${RED}Some parameters are missing in config file \"$configFile\"${NC}\n" >&2
    exit 1
  else
    echo "Config is valid..."
    makeOpenstackDir=`mkdir -p ~/.openstack`
    echo "Placing config in config directory..."
    copyOpenstackRc=`cp $configFile ~/.openstack/admin.rc`
  fi
  echo "Done."
}

function about() {
  printf '\033[1;34m       __________\033[0m.__          __    _____                    \033[1;34m________   \n' >&2
  printf '\033[1;34m       \______   \\\033[0m  | _____ _/  |__/ ____\___________  _____\033[1;34m/   __   \ \n' >&2
  printf '\033[1;34m        |     ___/\033[0m  | \__  \\\   __\   __\/  _ \_  __ \/     \033[1;34m\____    / \n' >&2
  printf '\033[1;34m        |    |\033[0m   |  |__/ __ \|  |  |  | (  <_> )  | \/  Y Y  \\\033[1;34m /    /  \n' >&2
  printf '\033[1;34m        |____|\033[0m   |____(______/__|  |__|  \____/|__|  |__|_|__/\033[1;34m/____/    \n' >&2
  printf '\033[1;34m             ____   ____\033[0m_____    \033[1;34m___________\033[0m            __    \n' >&2
  printf '\033[1;34m             \   \ /   /\033[0m     \   \033[1;34m\__    ___/\033[0m___   ____ |  |   \n' >&2
  printf '\033[1;34m              \   Y   /\033[0m  \ /  \  \033[1;34m  |    |\033[0m /  _ \ /  _ \|  |   \n' >&2
  printf '\033[1;34m               \     /\033[0m    Y    \ \033[1;34m  |    |\033[0m(  <_> |  <_> )  |__ \n' >&2
  printf '\033[1;34m                \___/\033[0m\____|____/ \033[1;34m  |____|\033[0m \____/ \____/|____/ \n' >&2
  
  echo '
  Version: v0.0.1:

  This tool is inteded for a service provider to create VMs (Virtual Machines) for their customers.

  This tool will create a VM with the following specs:
    * 2 Virtual CPUs
    * 4 GBs of RAM
    * 150GB of Block Storage
    * 1 Public IP Address
    * No firewall rules
    * SSH Access
    * Random password with to following requirements:
      - Upper case letter
      - Lower case letter
      - Special character
      - Number
      - 16 characters long
  '
}

function usage() {
 echo '
  Usage:

  vm create [--image=<image name>]
      * Creates a new VM and output the VMs username, password, & IP Address
  
  vm delete <vm name>
      * Deletes the specified VM.

  vm config <path to openstack.rc>
      * Configure this tool to use the OpenStack RC of your choice.

  vm about
      * Displays information about this tool

  vm help
      * Displays this help screen
  
      '
}

case "$1" in
  create)
    createVm $2 
    ;;
  delete)
    delVm $2
    ;;
  config)
    config $2
    ;;
  about)
    about
    ;;
  help)
    usage
    ;;
  *)
    if [ -z "$1" ]; then
      printf "${RED}No parameter specified.${NC}\n" >&2
    else
      printf "${RED}$1 is not a valid parameter.${NC}\n" >&2
    fi
    usage
    exit 1
esac
